import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_bvp

# =================== Исходные данные ===================
R = 200.0  # Радиус сферы в см
S0 = 1.0e6  # Интенсивность точечного источника (нейтронов/с) (уменьшено значение)
rho = 1.7  # Плотность графита, г/см³
Na = 6.022e23  # Число Авогадро
A_carb = 12.0  # Атомный вес углерода (г/моль)
sigma_scatter = 4.8e-24  # Сечение рассеяния углерода (см²)
sigma_abs = 3.5e-28  # Сечение поглощения углерода (см²)

# =================== Расчёты свойств системы ===================
n_carb = rho * Na / A_carb  # Концентрация атомов графита (атомов/см³)
Sigma_s = sigma_scatter * n_carb  # Макроскопическое сечение рассеяния (см⁻¹)
Sigma_a = sigma_abs * n_carb  # Макроскопическое сечение поглощения (см⁻¹)
Sigma_t = Sigma_s + Sigma_a  # Общее макроскопическое сечение (см⁻¹)
D = 1 / (3 * Sigma_t)  # Коэффициент диффузии (см)
L = 1 / Sigma_t  # Средняя длина свободного пробега (см)
R_extr = R + 0.71 * L  # Экстраполированная граница (см)

print(f"Макроскопическое сечение Σs = {Sigma_s:.6e} см⁻¹")
print(f"Макроскопическое сечение Σa = {Sigma_a:.6e} см⁻¹")
print(f"Коэффициент диффузии D = {D:.6e} см")
print(f"Экстраполированная граница R_extr = {R_extr:.2f} см")

# =================== Уравнение диффузии ===================
def diffusion_eq(r, phi):
    """
    Уравнение диффузии:
    1) dphi/dr = phi[1]
    2) d2phi/dr2 = -Σa/D * phi[0] - S0 / (4πD * r²) (источник)
    """
    dphi_dr = phi[1]
    d2phi_dr2 = np.zeros_like(r)
    # Учет источника
    d2phi_dr2[r > 0] = -(Sigma_a / D) * phi[0][r > 0] - (S0 / (4 * np.pi * D * r[r > 0] ** 2))
    d2phi_dr2[r == 0] = 0  # Убираем деление на 0 в центре
    return np.vstack((dphi_dr, d2phi_dr2))

# =================== Граничные условия ===================
def bc(phi0, phiR):
    """
    Граничные условия:
    - dφ/dr = 0 в центре;
    - φ(R_extr) = 0 на экстраполированной границе.
    """
    return np.array([phi0[1], phiR[0]])

# Сетка по радиусу
r = np.linspace(1e-10, R_extr, 2000)  # Сетка в 2000 точек, избегаем r=0

# Начальное приближение: нулевые значения для потока
phi_init = np.zeros((2, r.size))

# =================== Решение уравнения ===================
solution = solve_bvp(diffusion_eq, bc, r, phi_init)

# =================== Результаты ===================
r_solution = solution.x
phi_solution = solution.y[0]

# Нормализация потока
phi_norm = phi_solution / np.max(phi_solution)  # Нормализуем поток для удобства анализа

# =================== Построение графика ===================
plt.figure(figsize=(10, 6))
plt.plot(r_solution, phi_norm, label="Диффузионное приближение", color="blue")
plt.axvline(R, color="red", linestyle="--", label=f"Граница сферы (R = {R:.1f} см)")
plt.axvline(R_extr, color="orange", linestyle="--", label=f"Экстраполированная граница (R_extr = {R_extr:.1f} см)")
plt.xlabel("Радиус, см")
plt.ylabel("Нормализованный поток нейтронов, φ(r)")
plt.title("Распределение потока нейтронов в графитовой сфере")
plt.legend()
plt.grid()
plt.show()

# =================== Вывод данных ===================
print(f"Экстраполированная граница (R_extr): {R_extr:.2f} см")
print(f"Максимальный поток (до нормализации): {np.max(phi_solution):.2e}")